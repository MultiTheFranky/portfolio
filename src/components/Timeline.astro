---
type Entry = {
    title: string;
    date: string;
    description: string;
    icon?: string;
};
const timeLineEntries: Entry[] = [
    {
        title: "Born",
        date: "1997",
        description: "I was born in Santander, Spain.",
        icon: "üë∂"
    },
    {
        title: "First program",
        date: "2009",
        description: "I wrote my first program in Java. A simple calculator.",
        icon: "üñ•Ô∏è"
    },
    {
        title: "Start of high school",
        date: "2015",
        description:
            "I went to high school and started studying Computer Science on UNICAN (University of Cantabria).",
        icon: "üéì"
    },
    {
        title: "First job",
        date: "2019",
        description: "I started working as a Software Engineer at Incentro.",
        icon: "üíº"
    }
];
---

<main class="mx-auto max-w-7xl px-6 lg:px-8 mb-16 mt-16">
    <h1 class="text-center text-2xl font-semibold leading-8 mb-8 mt-32">Timeline</h1>

    <div class="relative">
        <!-- vertical line for mobile -->
        <span class="absolute left-6 top-0 bottom-0 w-px bg-gray-200 dark:bg-gray-700 sm:hidden" />

    <ol class="items-start sm:flex sm:flex-col lg:flex-row lg:items-start">
            {
                timeLineEntries.map((entry, index) => (
                    <li class="relative mb-8 sm:mb-0 timeline-item reveal" style={`--delay: ${index * 120}ms`} data-index={index}>
                        <div class="flex items-start sm:items-center lg:items-start">
                            <div class="z-10 flex items-center justify-center w-8 h-8 bg-blue-100 rounded-full ring-0 ring-white dark:bg-blue-900 sm:ring-8 dark:ring-gray-900 shrink-0 transform transition-transform duration-300 hover:scale-110">
                                <span class="text-sm">{entry.icon || (
                                    <svg
                                        class="w-3 h-3 text-blue-800 dark:text-blue-300"
                                        aria-hidden="true"
                                        xmlns="http://www.w3.org/2000/svg"
                                        fill="currentColor"
                                        viewBox="0 0 20 20"
                                    >
                                        <path d="M20 4a2 2 0 0 0-2-2h-2V1a1 1 0 0 0-2 0v1h-3V1a1 1 0 0 0-2 0v1H6V1a1 1 0 0 0-2 0v1H2a2 2 0 0 0-2 2v2h20V4ZM0 18a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8H0v10Zm5-8h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2Z" />
                                    </svg>
                                )}</span>
                            </div>

                            <!-- connector for desktop -->
                            <div class="hidden lg:flex w-full bg-gray-200 h-0.5 dark:bg-gray-700 ml-4" />
                        </div>

                        <div class="mt-3 sm:pr-8 ml-12 sm:ml-0 lg:max-w-[45%] timeline-content">
                            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
                                {entry.title}
                            </h3>
                            <time class="block mb-2 text-sm font-normal leading-none text-gray-400 dark:text-gray-500">{entry.date}</time>
                            <p class="text-base font-normal text-gray-500 dark:text-gray-400">{entry.description}</p>
                        </div>
                    </li>
                ))
            }
        </ol>
    </div>

    <style>
        .reveal { opacity: 0; transform: translateY(8px); transition: opacity 560ms cubic-bezier(.2,.9,.2,1) var(--delay), transform 560ms cubic-bezier(.2,.9,.2,1) var(--delay); }
        .reveal.in-view { opacity: 1; transform: translateY(0); }

        /* small visual tweak so mobile line aligns with icons */
        @media (max-width: 639px) {
            .timeline-item { padding-left: 1rem; }
            .timeline-item > div > .w-8 { margin-left: 0.75rem; }
        }

        /* Alternating layout on large screens */
        @media (min-width: 1024px) {
            ol { display: block; }
            .timeline-item { display: flex; align-items: flex-start; gap: 1.5rem; margin-bottom: 2.5rem; }
            .timeline-item .timeline-content { order: 2; }
            .timeline-item > div { order: 1; }

            /* even items: flip sides */
            .timeline-item:nth-child(even) { flex-direction: row-reverse; }
            .timeline-item:nth-child(even) .timeline-content { text-align: right; }
            .timeline-item:nth-child(even) .w-8 { margin-right: 0.5rem; }
            .timeline-item:nth-child(odd) .w-8 { margin-left: 0.5rem; }
        }
    </style>

    <script type="module">
        // lightweight reveal-on-scroll for timeline items
        if (typeof window !== 'undefined') {
            const prefersReduced = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
            if (prefersReduced) {
                document.querySelectorAll('.reveal').forEach(el => el.classList.add('in-view'));
            } else {
                const obs = new IntersectionObserver((entries) => {
                    entries.forEach(e => {
                        if (e.isIntersecting) {
                            e.target.classList.add('in-view');
                            obs.unobserve(e.target);
                        }
                    });
                }, { threshold: 0.12 });

                document.querySelectorAll('.reveal').forEach((el) => obs.observe(el));
            }
        }
    </script>
</main>
